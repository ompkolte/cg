#include <GL/glut.h>
#include <stdbool.h>
#include <stdio.h>

// Define region codes
const int INSIDE = 0;
const int LEFT = 1;
const int RIGHT = 2;
const int BOTTOM = 4;
const int TOP = 8;

float xmin = -100, ymin = -100, xmax = 100, ymax = 100;

// Define Point struct first
struct Point {
    float x, y;
};

// Define Line struct that uses Point
struct Line {
    struct Point start;
    struct Point end;
};

// Initialize lines as an array of Line structs
struct Line lines[4] = {
    {{-150, -50}, {150, 200}},
    {{-200, -200}, {200, 200}},
    {{-120, 50}, {80, 150}},
    {{50, -120}, {120, 50}}
};

// Function to compute the region code for a point (x, y)
int computeCode(float x, float y) {
    int code = INSIDE;

    if (x < xmin) code |= LEFT;
    else if (x > xmax) code |= RIGHT;
    if (y < ymin) code |= BOTTOM;
    else if (y > ymax) code |= TOP;

    return code;
}

// Cohen-Sutherland Clipping Algorithm
bool cohenSutherlandClip(float *x0, float *y0, float *x1, float *y1) {
    int code0 = computeCode(*x0, *y0);
    int code1 = computeCode(*x1, *y1);
    bool accept = false;

    while (true) {
        if ((code0 == 0) && (code1 == 0)) {
            accept = true;
            break;
        } else if (code0 & code1) {
            break;
        } else {
            int outcodeOut = code0 ? code0 : code1;
            float x, y;

            if (outcodeOut & TOP) {
                x = *x0 + (*x1 - *x0) * (ymax - *y0) / (*y1 - *y0);
                y = ymax;
            } else if (outcodeOut & BOTTOM) {
                x = *x0 + (*x1 - *x0) * (ymin - *y0) / (*y1 - *y0);
                y = ymin;
            } else if (outcodeOut & RIGHT) {
                y = *y0 + (*y1 - *y0) * (xmax - *x0) / (*x1 - *x0);
                x = xmax;
            } else if (outcodeOut & LEFT) {
                y = *y0 + (*y1 - *y0) * (xmin - *x0) / (*x1 - *x0);
                x = xmin;
            }

            if (outcodeOut == code0) {
                *x0 = x;
                *y0 = y;
                code0 = computeCode(*x0, *y0);
            } else {
                *x1 = x;
                *y1 = y;
                code1 = computeCode(*x1, *y1);
            }
        }
    }
    return accept;
}

void displayOriginal() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_LINES);
    for (int i = 0; i < 4; ++i) {
        glVertex2f(lines[i].start.x, lines[i].start.y);
        glVertex2f(lines[i].end.x, lines[i].end.y);
    }
    glEnd();

    glColor3f(0.0, 1.0, 0.0);
    glBegin(GL_LINE_LOOP);
    glVertex2f(xmin, ymin);
    glVertex2f(xmax, ymin);
    glVertex2f(xmax, ymax);
    glVertex2f(xmin, ymax);
    glEnd();
    glFlush();
}

void displayClipped() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 1.0, 0.0);
    glBegin(GL_LINE_LOOP);
    glVertex2f(xmin, ymin);
    glVertex2f(xmax, ymin);
    glVertex2f(xmax, ymax);
    glVertex2f(xmin, ymax);
    glEnd();

    glColor3f(0.0, 0.0, 1.0);
    glBegin(GL_LINES);
    for (int i = 0; i < 4; ++i) {
        float x0 = lines[i].start.x, y0 = lines[i].start.y;
        float x1 = lines[i].end.x, y1 = lines[i].end.y;
        if (cohenSutherlandClip(&x0, &y0, &x1, &y1)) {
            glVertex2f(x0, y0);
            glVertex2f(x1, y1);
        }
    }
    glEnd();
    glFlush();
}

void initOpenGL() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    gluOrtho2D(-300, 300, -300, 300);
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Original Lines Before Clipping");
    initOpenGL();
    glutDisplayFunc(displayOriginal);

    glutInitWindowPosition(520, 0);
    glutCreateWindow("Clipped Lines After Cohen-Sutherland Clipping");
    initOpenGL();
    glutDisplayFunc(displayClipped);

    glutMainLoop();
    return 0;
}
