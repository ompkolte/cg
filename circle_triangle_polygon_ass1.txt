#include <GL/glut.h>

Triangles :
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    
    glBegin(GL_TRIANGLES);
        glVertex2f(0.0, 0.25);   // Top vertex
        glVertex2f(-0.25, -0.25); // Bottom-left vertex
        glVertex2f(0.25, -0.25);  // Bottom-right vertex
    glEnd();
    
    glFlush();
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(600, 600);
    glutInitWindowPosition(200, 200);
    glutCreateWindow("OpenGL Triangle");
    
    // Set clear color (background color)
    glClearColor(0.0, 0.0, 0.0, 1.0); // Black background
    
    glutDisplayFunc(display);
    glutMainLoop();
    
    return 0;
}

Rectangle : 
#include <GL/glut.h>

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    
    glBegin(GL_POLYGON);
        // Color for the first vertex (red)
        glColor3f(1.0, 0.0, 0.0);
        glVertex2f(-0.4, 0.2);
        
        // Color for the second vertex (green)
        glColor3f(0.0, 1.0, 0.0);
        glVertex2f(0.4, 0.2);
        
        // Color for the third vertex (blue)
        glColor3f(0.0, 0.0, 1.0);
        glVertex2f(0.4, -0.2);
        
        // Color for the fourth vertex (yellow)
        glColor3f(1.0, 1.0, 0.0);
        glVertex2f(-0.4, -0.2);
    glEnd();
    
    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(300, 300);
    glutCreateWindow("OpenGL Polygon with Gradient Colors");
    
    // Set the background color (optional)
    glClearColor(0.0, 0.0, 0.0, 1.0); // Black background
    
    glutDisplayFunc(display);
    glutMainLoop();
    
    return 0;
}

Pentagone : 
#include <GL/glut.h>

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    
    // Set the color to red
    glColor3f(1.0, 0.0, 0.0);
    
    glBegin(GL_POLYGON);
        glVertex2f(0.0, 0.5);    // Top vertex
        glVertex2f(-0.5, 0.25);  // Top-left vertex
        glVertex2f(-0.25, -0.75); // Bottom-left vertex
        glVertex2f(0.25, -0.75);  // Bottom-right vertex
        glVertex2f(0.5, 0.25);    // Top-right vertex
    glEnd();
    
    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(300, 300);
    glutCreateWindow("OpenGL Pentagon");
    
    // Set the background color (optional)
    glClearColor(0.0, 0.0, 0.0, 1.0); // Black background
    
    glutDisplayFunc(display);
    glutMainLoop();
    
    return 0;
}

circle : 
#include <GL/glut.h>
#include <cmath>

const int sides = 100; // Number of sides for the approximate circle

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Set the color to red (R, G, B values)
    glColor3f(1.0, 0.0, 0.0); // Red color

    glBegin(GL_POLYGON);
    for (int i = 0; i < sides; i++) {
        float theta = 2.0f * M_PI * float(i) / float(sides); // Angle in radians
        float x = 0.5f * cos(theta); // x-coordinate (radius = 0.5)
        float y = 0.5f * sin(theta); // y-coordinate (radius = 0.5)
        glVertex2f(x, y);
    }
    glEnd();

    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB);
    glutInitWindowSize(800, 800);
    glutInitWindowPosition(50, 50);
    glutCreateWindow("OpenGL Circle");

    // Set the background color
    glClearColor(0.0, 0.0, 0.0, 1.0); // Black background

    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
square :
#include <GL/glut.h>

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Set the color to blue (R, G, B values)
    glColor3f(0.0, 0.0, 1.0); // Blue color

    glBegin(GL_QUADS);
        glVertex2f(-0.5, -0.5); // Bottom-left vertex
        glVertex2f(0.5, -0.5);  // Bottom-right vertex
        glVertex2f(0.5, 0.5);   // Top-right vertex
        glVertex2f(-0.5, 0.5);  // Top-left vertex
    glEnd();

    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(50, 50);
    glutCreateWindow("OpenGL Square");

    // Set the background color
    glClearColor(0.0, 0.0, 0.0, 1.0); // Black background

    glutDisplayFunc(display);
    glutMainLoop();

    return 0;
}

