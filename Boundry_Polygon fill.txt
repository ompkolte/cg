Boundry fill and polygon fill :


#include <GL/glut.h>

const int width = 800;
const int height = 600;
const int numVertices = 4;
int polygonVertices[numVertices][2] = {{200, 200}, {400, 200}, {400, 400}, {200, 400}};
float boundaryColor[] = {1.0, 0.0, 0.0};
float fillColor[] = {0.0, 1.0, 0.0};
float backgroundColor[] = {1.0, 1.0, 1.0};

void drawPolygon() {
    glColor3fv(boundaryColor);
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < numVertices; i++)
        glVertex2iv(polygonVertices[i]);
    glEnd();
    glFlush();
}

void getPixelColor(int x, int y, float* color) {
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, color);
}

void setPixelColor(int x, int y, float* color) {
    glBegin(GL_POINTS);
    glColor3fv(color);
    glVertex2i(x, y);
    glEnd();
    glFlush();
}

void boundaryFill4(int x, int y, float* fillColor, float* boundaryColor) {
    float color[3];
    getPixelColor(x, y, color);
    if ((color[0] != boundaryColor[0] || color[1] != boundaryColor[1] || color[2] != boundaryColor[2]) &&
        (color[0] != fillColor[0] || color[1] != fillColor[1] || color[2] != fillColor[2])) {
        setPixelColor(x, y, fillColor);
        boundaryFill4(x + 1, y, fillColor, boundaryColor);
        boundaryFill4(x - 1, y, fillColor, boundaryColor);
        boundaryFill4(x, y + 1, fillColor, boundaryColor);
        boundaryFill4(x, y - 1, fillColor, boundaryColor);
    }
}

void boundaryFill8(int x, int y, float* fillColor, float* boundaryColor) {
    float color[3];
    getPixelColor(x, y, color);
    if ((color[0] != boundaryColor[0] || color[1] != boundaryColor[1] || color[2] != boundaryColor[2]) &&
        (color[0] != fillColor[0] || color[1] != fillColor[1] || color[2] != fillColor[2])) {
        setPixelColor(x, y, fillColor);
        boundaryFill8(x + 1, y, fillColor, boundaryColor);
        boundaryFill8(x - 1, y, fillColor, boundaryColor);
        boundaryFill8(x, y + 1, fillColor, boundaryColor);
        boundaryFill8(x, y - 1, fillColor, boundaryColor);
        boundaryFill8(x + 1, y + 1, fillColor, boundaryColor);
        boundaryFill8(x - 1, y - 1, fillColor, boundaryColor);
        boundaryFill8(x + 1, y - 1, fillColor, boundaryColor);
        boundaryFill8(x - 1, y + 1, fillColor, boundaryColor);
    }
}

void floodFill4(int x, int y, float* fillColor, float* backgroundColor) {
    float color[3];
    getPixelColor(x, y, color);
    if (color[0] == backgroundColor[0] && color[1] == backgroundColor[1] && color[2] == backgroundColor[2]) {
        setPixelColor(x, y, fillColor);
        floodFill4(x + 1, y, fillColor, backgroundColor);
        floodFill4(x - 1, y, fillColor, backgroundColor);
        floodFill4(x, y + 1, fillColor, backgroundColor);
        floodFill4(x, y - 1, fillColor, backgroundColor);
    }
}

void floodFill8(int x, int y, float* fillColor, float* backgroundColor) {
    float color[3];
    getPixelColor(x, y, color);
    if (color[0] == backgroundColor[0] && color[1] == backgroundColor[1] && color[2] == backgroundColor[2]) {
        setPixelColor(x, y, fillColor);
        floodFill8(x + 1, y, fillColor, backgroundColor);
        floodFill8(x - 1, y, fillColor, backgroundColor);
        floodFill8(x, y + 1, fillColor, backgroundColor);
        floodFill8(x, y - 1, fillColor, backgroundColor);
        floodFill8(x + 1, y + 1, fillColor, backgroundColor);
        floodFill8(x - 1, y - 1, fillColor, backgroundColor);
        floodFill8(x + 1, y - 1, fillColor, backgroundColor);
        floodFill8(x - 1, y + 1, fillColor, backgroundColor);
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawPolygon();
}

void menu(int choice) {
    int x = 250, y = 250;
    switch (choice) {
        case 1:
            boundaryFill4(x, y, fillColor, boundaryColor);
            break;
        case 2:
            boundaryFill8(x, y, fillColor, boundaryColor);
            break;
        case 3:
            floodFill4(x, y, fillColor, backgroundColor);
            break;
        case 4:
            floodFill8(x, y, fillColor, backgroundColor);
            break;
    }
}

void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glPointSize(1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, width, 0, height);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(width, height);
    glutCreateWindow("Polygon Fill Algorithms");

    init();
    glutDisplayFunc(display);

    glutCreateMenu(menu);
    glutAddMenuEntry("Boundary Fill (4-connected)", 1);
    glutAddMenuEntry("Boundary Fill (8-connected)", 2);
    glutAddMenuEntry("Flood Fill (4-connected)", 3);
    glutAddMenuEntry("Flood Fill (8-connected)", 4);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutMainLoop();
    return 0;
}
