#include <GL/glut.h>

const int width = 800;
const int height = 600;
const int numVertices = 4;
int polygonVertices[numVertices][2] = {{200, 200}, {400, 200}, {400, 400}, {200, 400}};
float boundaryColor[] = {1.0, 0.0, 0.0};
float fillColor[] = {0.0, 1.0, 0.0};

void drawPolygon() {
    glColor3fv(boundaryColor);
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < numVertices; i++)
        glVertex2iv(polygonVertices[i]);
    glEnd();
    glFlush();
}

void getPixelColor(int x, int y, float* color) {
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, color);
}

void setPixelColor(int x, int y, float* color) {
    glBegin(GL_POINTS);
    glColor3fv(color);
    glVertex2i(x, y);
    glEnd();
    glFlush();
}

void scanLineFill() {
    for (int y = 200; y <= 400; y++) {
        bool inside = false;
        for (int x = 200; x <= 400; x++) {
            float color[3];
            getPixelColor(x, y, color);
            if (color[0] == boundaryColor[0] && color[1] == boundaryColor[1] && color[2] == boundaryColor[2])
                inside = !inside;
            if (inside)
                setPixelColor(x, y, fillColor);
        }
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawPolygon();
    scanLineFill();
}

void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glPointSize(1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, width, 0, height);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(width, height);
    glutCreateWindow("Polygon Fill: Scan Line Algorithm");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
